import { OutboundMessage } from "../message/outbound";
import { InboundMessage } from "../message/inbound";
export declare type WebSocketFactory = () => any;
export declare function createEoswsSocket(webSocketFactory: WebSocketFactory, options?: SocketOptions): DefaultEoswsSocket;
export interface EoswsSocket {
    isConnected: boolean;
    connect(listener: SocketMessageListener): Promise<void>;
    disconnect(): Promise<void>;
    send<T>(message: OutboundMessage<T>): Promise<boolean>;
}
export declare type SocketMessageListener = (message: InboundMessage<any>) => void;
export interface SocketOptions {
    id?: string;
    autoReconnect?: boolean;
    reconnectDelayInMs?: number;
    keepAlive?: boolean;
    keepAliveIntervalInMs?: number;
    onInvalidMessage?: (message: object) => void;
    onReconnect?: () => void;
    onError?: (message: object) => void;
    onClose?: (message: object) => void;
}
declare class DefaultEoswsSocket implements EoswsSocket {
    isConnected: boolean;
    socket?: any;
    private socketFactory;
    private options;
    private listener?;
    private connectionPromise?;
    private intervalHandler?;
    private debug;
    constructor(socketFactory: WebSocketFactory, options: SocketOptions);
    connect(listener: SocketMessageListener): Promise<void>;
    disconnect(): Promise<void>;
    send<T>(message: OutboundMessage<T>): Promise<boolean>;
    private createAnOpenSocket;
    private onSocketConnectOpenFactory;
    private onSocketReconnectOpenFactory;
    private onSocketErrorFactory;
    private onSocketClose;
    private onSocketMessage;
    private canHandleType;
    private registerKeepAliveHandler;
    private unregisterKeepAliveHandler;
    private reconnect;
    private cleanSocket;
    private onInvalidMessage;
    private onReconnect;
    private onClose;
    private onError;
    private keepAliveOption;
}
export {};
